/*!
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { Actor, CollisionDetectionMode } from '.';
import { QuaternionLike, Vector3, Vector3Like } from '../..';
import { RigidBodyConstraints } from '../rigidBodyConstraints';
export interface RigidBodyLike {
    enabled: boolean;
    velocity: Partial<Vector3Like>;
    angularVelocity: Partial<Vector3Like>;
    mass: number;
    detectCollisions: boolean;
    collisionDetectionMode: CollisionDetectionMode;
    useGravity: boolean;
    constraints: RigidBodyConstraints[];
}
export declare class RigidBody implements RigidBodyLike {
    private $owner;
    private _velocity;
    private _angularVelocity;
    private _constraints;
    enabled: boolean;
    mass: number;
    detectCollisions: boolean;
    collisionDetectionMode: CollisionDetectionMode;
    useGravity: boolean;
    /**
     * PUBLIC ACCESSORS
     */
    velocity: Partial<Vector3>;
    angularVelocity: Partial<Vector3>;
    constraints: RigidBodyConstraints[];
    /**
     * PUBLIC METHODS
     */
    /**
     * Creates a new RigidBody instance.
     * @param $owner The owning actor instance. Field name is prefixed with a dollar sign so that it is ignored by
     * the actor patch detection system.
     */
    constructor($owner: Actor);
    copy(from: Partial<RigidBodyLike>): this;
    toJSON(): RigidBodyLike;
    movePosition(position: Partial<Vector3Like>): void;
    moveRotation(rotation: QuaternionLike): void;
    addForce(force: Partial<Vector3Like>): void;
    addForceAtPosition(force: Partial<Vector3Like>, position: Partial<Vector3Like>): void;
    addTorque(torque: Partial<Vector3Like>): void;
    addRelativeTorque(relativeTorque: Partial<Vector3Like>): void;
}
//# sourceMappingURL=rigidbody.d.ts.map